/**
 * IListener interface
 *
 * on: key reference
 * next: callback when emitted event with provided key
 * error: calback if EventEmitter catches an error;
 */
interface IListener {
    on: string;
    next: (arg: any) => void;
    error?: (err: Error) => void;
}
/**
 * EventEmitter constructor options
 */
interface Options {
    debug: 'error' | null | 'all';
}
/**
 * EventEmitter
 *
 * DOESN'T keep values, only transmit to subscribers
 * (emit before subscribe doesn't make any sense);
 *
 * @option _listeners
 * @option _options
 */
declare class EventEmitter {
    protected _listeners: Map<string, IListener[]>;
    protected _options: Options;
    constructor(options?: Options);
    /**
     * Debug, uses 2 levels (info or error), provided for each method;
     *
     * @param type
     * @param v
     * @param action
     */
    protected debug(type: 'error' | 'info', v: any, action: string): void;
    /**
     * Emits value to subscribers by key;
     *
     * @param key
     * @param val
     */
    emit(key: string, val: any): void;
    /**
     * Subscribe to all events with provided key (listener.on);
     *
     * @param listener
     * @returns
     */
    subscribe(listener: IListener): IListener;
    /**
     * Unsubscribe by subscriber referer
     *
     * @param listener
     */
    unsubscribe(listener: IListener): void;
    /**
     * Remove all subscribers for provided key
     *
     * @param key
     */
    unsubscribeAllKey(key: string): void;
    /**
     * Remove ALL subscribers
     */
    unsubscribeAll(): void;
}
/**
 * Singleton, every new instance would refer to existed one;
 */
declare class EventEmitterSingleton extends EventEmitter {
    #private;
    constructor(options?: Options);
    /**
     * Destroy singleton reference and remove all subscribers
     */
    destroy(): void;
}
declare const _default: {
    EventEmitterSingleton: typeof EventEmitterSingleton;
    EventEmitter: typeof EventEmitter;
};

export { EventEmitter, EventEmitterSingleton, type IListener, _default as default };
