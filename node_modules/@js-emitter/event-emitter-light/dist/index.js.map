{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * IListener interface\n * \n * on: key reference\n * next: callback when emitted event with provided key\n * error: calback if EventEmitter catches an error;\n */\nexport interface IListener {\n  on: string;\n  next: (arg: any) => void;\n  error?: (err: Error) => void;\n}\n\n/**\n * EventEmitter constructor options\n */\ninterface Options {\n  debug: 'error' | null | 'all';\n}\n\n/**\n * EventEmitter\n * \n * DOESN'T keep values, only transmit to subscribers\n * (emit before subscribe doesn't make any sense);\n * \n * @option _listeners\n * @option _options\n */\nexport class EventEmitter {\n  protected _listeners = new Map<string, Array<IListener>>();\n  protected _options: Options = { debug: null };\n  \n  constructor(options?: Options) {\n    if (options) {\n      this._options = options;\n    }\n\n    return this;\n  }\n\n  /**\n   * Debug, uses 2 levels (info or error), provided for each method;\n   * \n   * @param type \n   * @param v \n   * @param action \n   */\n  protected debug(type: 'error' | 'info', v: any, action: string) {\n    if (this._options.debug) {\n      if (type === 'info' && (this._options.debug === 'all')) {\n        console.info(`%c ${action}`, \"color:blue;\", v);\n      }\n      if (type === 'error' && (this._options.debug === 'all' || this._options.debug === 'error')) {\n        console.info(`%c ${action}`, \"color:red;\", v);\n      }\n    }\n  }\n\n  /**\n   * Emits value to subscribers by key;\n   * \n   * @param key \n   * @param val \n   */\n  public emit(key: string, val: any): void {\n    try {\n      const listenersOn = this._listeners.get(key);\n      if (listenersOn?.length) {\n        listenersOn.forEach((l) => {\n          this.debug('info', { l, key, val }, 'emit');\n          typeof l.next === 'function'\n            ? l.next(val)\n            : l.error && l.error(new Error('method .next() must be a function'));\n        });\n      }\n    } catch (e) {\n      this.debug('error', e, 'emit error');\n    }\n  }\n\n  /**\n   * Subscribe to all events with provided key (listener.on);\n   * \n   * @param listener \n   * @returns\n   */\n  public subscribe(listener: IListener): IListener {\n    try {\n      if (this._listeners.has(listener.on)) {\n        this._listeners.set(\n          listener.on,\n          [...this._listeners.get(listener.on)!, listener],\n        );\n      } else {\n        this._listeners.set(listener.on, [listener]);\n      }\n      this.debug('info', { listeners: this._listeners }, 'subscribe');\n      return listener;\n    } catch (e) {\n      this.debug('error', e, 'subscribe error');\n      listener.error && listener.error(e as Error);\n      return listener;\n    }\n  }\n\n  /**\n   * Unsubscribe by subscriber referer\n   * \n   * @param listener \n   */\n  public unsubscribe(listener: IListener): void {\n    try {\n      const listenersOn = this._listeners.get(listener.on);\n      if (listenersOn?.length) {\n        this._listeners.set(listener.on, listenersOn.filter((l) => l !== listener));\n      }\n      this.debug('info', { listeners: this._listeners }, 'unsubscribe');\n    } catch (e) {\n      this.debug('error', e, 'unsubscribe error');\n      listener.error && listener.error(e as Error);\n    }\n  }\n\n  /**\n   * Remove all subscribers for provided key\n   * \n   * @param key \n   */\n  public unsubscribeAllKey(key: string): void {\n    try {\n      this._listeners.delete(key);\n    } catch (e) {\n      this.debug('error', e, 'unsubscribeAllKey error');\n    }\n  }\n\n  /**\n   * Remove ALL subscribers\n   */\n  public unsubscribeAll(): void {\n    try {\n      this._listeners.clear();\n    } catch (e) {\n      this.debug('error', e, 'unsubscribeAll error');\n    }\n  }\n}\n\n/**\n * Singleton, every new instance would refer to existed one;\n */\nexport class EventEmitterSingleton extends EventEmitter {\n  static #instance: null | EventEmitterSingleton = null;\n\n  constructor(options?: Options) {\n    super(options);\n\n    if (EventEmitterSingleton.#instance) {\n      return EventEmitterSingleton.#instance;\n    }\n    EventEmitterSingleton.#instance = this;\n\n    return this;\n  }\n\n  /**\n   * Destroy singleton reference and remove all subscribers\n   */\n  public destroy(): void {\n    try {\n      this.unsubscribeAll();\n      EventEmitterSingleton.#instance = null;\n    } catch (e) {\n      this.debug('error', e, 'destroy error');\n    }\n  }\n}\n\nexport default {\n  EventEmitterSingleton,\n  EventEmitter\n}\n"],"mappings":"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","names":[]}